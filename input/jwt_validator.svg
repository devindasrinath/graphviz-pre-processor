<?xml version="1.0" encoding="UTF-8"?>
<svg
  width="200"
  height="150"
  viewBox="0 0 200 150"
  xmlns="http://www.w3.org/2000/svg">
  <!-- Background with Gradient -->
  <defs>
    <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color: #f00000; stop-opacity: 1" />
      <stop offset="100%" style="stop-color: #f00000; stop-opacity: 1" />
    </linearGradient>
  </defs>
  <rect width="200" height="150" fill="url(#grad1)" rx="15" ry="15" />

  <!-- Key-Value Pairs -->
  <foreignObject x="10" y="10" width="180" height="130">
    <body xmlns="http://www.w3.org/1999/xhtml" style="margin: 0">
      <div
        style="
          font-family: Arial, sans-serif;
          font-size: 14px;
          color: #fff;
          text-align: left;
          padding: 10px;
          box-sizing: border-box;
        ">
        <div
          style="
            background-color: rgba(0, 0, 0, 0.5);
            padding: 10px;
            border-radius: 10px;
          ">
          <p style="margin: 5px 0; line-height: 1.5" id="key1">
            <strong>Key1:</strong> Value1
          </p>
          <p style="margin: 5px 0; line-height: 1.5">
            <strong>Key2:</strong> Value2
          </p>
          <p style="margin: 5px 0; line-height: 1.5">
            <strong>Key3:</strong> Value3
          </p>
          <p style="margin: 5px 0; line-height: 1.5">
            <strong>Key4:</strong> Value4
          </p>
        </div>
      </div>
    </body>
  </foreignObject>
  
<script>
  // <![CDATA[
  let retryInterval = 1000; // Initial retry interval of 1 second

  function connect() {
    const ws = new WebSocket('ws://localhost:8080');

    ws.onopen = function () {
      console.log('Connected to WebSocket server');
      retryInterval = 1000; // Reset the retry interval upon successful connection

      // Example message to send upon connection
      ws.send(
        JSON.stringify({
          type: 'subscribe',
          channels: ['channel1', 'channel2'],
        })
      );
    };

    ws.onmessage = function (e) {
      try {
        const data = JSON.parse(e.data);
        console.log('Message:', data);

        // Update the HTML content based on received data
        document.getElementById(
          'key1'
        ).innerHTML = `<strong>Key1:</strong> ${data.timestamp}`;
      } catch (err) {
        console.error('Error parsing message:', err);
      }
    };

    ws.onclose = function (e) {
      console.log(
        `Socket is closed. Reconnect will be attempted in ${
          retryInterval / 1000
        } seconds.`,
        e.reason
      );
      setTimeout(function () {
        retryInterval = Math.min(retryInterval * 2, 30000); // Exponential backoff with a max of 30 seconds
        connect();
      }, retryInterval);
    };

    ws.onerror = function (err) {
      console.error(
        'Socket encountered error: ',
        err.message,
        'Closing socket'
      );
      ws.close();
    };
  }

  connect();
   // ]]>
</script>
</svg>

